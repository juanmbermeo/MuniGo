# Generated by Django 5.1.1 on 2024-09-17 16:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import home.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Alerta',
            fields=[
                ('id_alerta', models.AutoField(primary_key=True, serialize=False)),
                ('titulo', models.CharField(max_length=150)),
                ('descripcion', models.TextField()),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('ubicacion', models.CharField(blank=True, max_length=255, null=True)),
                ('tipo_alerta', models.CharField(choices=[('emergencia', 'Emergencia'), ('informacion', 'Información')], default='informacion', max_length=50)),
                ('imagenes', models.FileField(blank=True, null=True, upload_to='imagenes_alertas/')),
                ('estado', models.CharField(choices=[('activa', 'Activa'), ('resuelta', 'Resuelta'), ('cancelada', 'Cancelada')], default='activa', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Barrio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Comunicado',
            fields=[
                ('id_comunicado', models.AutoField(primary_key=True, serialize=False)),
                ('titulo', models.CharField(max_length=200)),
                ('texto', models.TextField()),
                ('imagen', models.ImageField(upload_to='imagenes_comunicados/')),
                ('fecha_publicacion', models.DateTimeField(auto_now_add=True)),
                ('likes', models.PositiveIntegerField(default=0)),
                ('compartidos', models.PositiveIntegerField(default=0)),
                ('estado', models.CharField(choices=[('activo', 'Activo'), ('inactivo', 'Inactivo'), ('borrado', 'Borrado')], default='activo', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='ContactoEmergencia',
            fields=[
                ('id_contacto', models.AutoField(primary_key=True, serialize=False)),
                ('nombre', models.CharField(max_length=100)),
                ('telefono', models.CharField(max_length=15)),
                ('icono', models.ImageField(upload_to='iconos_emergencia/')),
            ],
        ),
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('id_evento', models.AutoField(primary_key=True, serialize=False)),
                ('titulo', models.CharField(max_length=150)),
                ('descripcion', models.TextField()),
                ('fecha_evento', models.DateField()),
                ('hora_evento', models.TimeField()),
                ('ubicacion', models.CharField(blank=True, max_length=255, null=True)),
                ('imagen', models.ImageField(blank=True, null=True, upload_to='eventos/')),
                ('likes', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='PagoServicio',
            fields=[
                ('id_contacto', models.AutoField(primary_key=True, serialize=False)),
                ('nombre_servicio', models.CharField(max_length=100)),
                ('icono', models.ImageField(upload_to='iconos_recoleccion/')),
                ('link', models.URLField(validators=[django.core.validators.URLValidator()])),
            ],
        ),
        migrations.CreateModel(
            name='ServicioMunicipal',
            fields=[
                ('id_servicio', models.AutoField(primary_key=True, serialize=False)),
                ('nombre', models.CharField(max_length=100)),
                ('descripcion', models.TextField()),
                ('ubicacion', models.CharField(max_length=255)),
                ('contacto', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='El número de teléfono debe tener el formato +XXX XXXXXXXXX', regex='^\\+\\d{1,3}\\s?\\d{8,14}$')])),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('hora_apertura', models.TimeField()),
                ('hora_cierre', models.TimeField()),
                ('icono', models.ImageField(upload_to='iconos/')),
            ],
            options={
                'verbose_name': 'Servicio Municipal',
                'verbose_name_plural': 'Servicios Municipales',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='TipoBasura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Basura',
            fields=[
                ('id_basura', models.AutoField(primary_key=True, serialize=False)),
                ('fecha', models.DateField()),
                ('hora', models.TimeField()),
                ('barrio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.barrio')),
                ('tipo_basura', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.tipobasura')),
            ],
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telefono', models.CharField(max_length=15, unique=True, validators=[home.models.validar_telefono])),
                ('email', models.EmailField(error_messages={'unique': 'Ya existe un usuario con ese correo electrónico.'}, max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('groups', models.ManyToManyField(blank=True, related_name='usuarios', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='usuarios', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
